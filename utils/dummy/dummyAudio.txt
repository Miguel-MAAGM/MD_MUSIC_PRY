import pyaudio
import wave
import time
import sys

def list_device_input():
    p = pyaudio.PyAudio()
    default_host_api = p.get_default_host_api_info()

    print(f"Dispositivos de entrada de audio disponibles ():")

    audio_input_devices = []

    for i in range(default_host_api['deviceCount']):
        device_info = p.get_device_info_by_index(i)
        if device_info["maxInputChannels"] > 0:
            audio_input_devices.append((i, device_info["name"]))
    return audio_input_devices


    



if __name__ == "__main__":
    list=list_device_input()
    print(list)

    with wave.open("Sound1.wav", 'rb') as wf:
        # Define callback for playback (1)
        print(f"{wf.getnframes() / 44100  }")
        def callback(in_data, frame_count, time_info, status):
            data = wf.readframes(frame_count)
            # If len(data) is less than requested frame_count, PyAudio automatically
            # assumes the stream is finished, and the stream stops.
            print(f"frame_acount={frame_count}\n\n")
            print(f"in_data={in_data}\n\n")
            print(f"time={time_info}\n\n")
            print(f"status={status}\n\n")
            return (data, pyaudio.paContinue)

        # Instantiate PyAudio and initialize PortAudio system resources (2)
        p = pyaudio.PyAudio()

        # Open stream using callback (3)
        stream = p.open(format=p.get_format_from_width(wf.getsampwidth()),
                        channels=wf.getnchannels(),
                        rate=wf.getframerate(),
                        output=True,
                        stream_callback=callback)

        # Wait for stream to finish (4)
        while stream.is_active():
            time.sleep(0.1)

        # Close the stream (5)
        stream.close()

        # Release PortAudio system resources (6)
        p.terminate()